diff --git a/src/alloc.hpp b/src/alloc.hpp
index a53d9f0..977aea5 100644
--- a/src/alloc.hpp
+++ b/src/alloc.hpp
@@ -6,7 +6,7 @@
 inline void* mp_alloc_func(size_t new_bytes)
 {
     new_bytes = ((new_bytes + 8) + 15) & ~15;
-#if defined _MSC_VER
+#if defined _MSC_VER || defined __MINGW32__
     uint8_t* ret = static_cast<uint8_t*>(_aligned_malloc(new_bytes, 16));
 #else
     void* ptr = nullptr;
@@ -20,7 +20,7 @@ inline void mp_free_func(void* old_ptr, size_t) {
     // if the old_ptr alignment is not to 16 bytes + 8 bytes offset, we did not
     // allocate it. It's an in-place buffer and should not be freed
     if ((std::uintptr_t(old_ptr) & 15) == 8) {
-#if defined _MSC_VER
+#if defined _MSC_VER || defined __MINGW32__
         _aligned_free(static_cast<uint8_t*>(old_ptr) - 8);
 #else
         std::free(static_cast<uint8_t*>(old_ptr) - 8);
diff --git a/src/include.h b/src/include.h
index 63be0ae..7729b9c 100644
--- a/src/include.h
+++ b/src/include.h
@@ -20,15 +20,10 @@
 #include <array>
 #include <sstream>
 #include <fstream>
-#ifndef _WIN32
 #include <unistd.h>
 typedef unsigned __int128 uint128;
 typedef __int128 int128;
 #define USED __attribute__((used))
-#else
-#include "uint128_t/uint128_t.h"
-#define USED
-#endif
 #include <cassert>
 #include <iomanip>
 #include <set>
diff --git a/src/prover_slow.h b/src/prover_slow.h
index 2cb18e8..61c8701 100644
--- a/src/prover_slow.h
+++ b/src/prover_slow.h
@@ -32,7 +32,7 @@ form GenerateWesolowski(form &y, form &x_init,
                         integer &D, PulmarkReducer& reducer,
                         std::vector<form>& intermediates,
                         uint64_t num_iterations,
-                        uint64_t k, uint64_t l) {
+                        uint64_t k, uint64_t l, std::atomic_bool &stopped) {
     integer B = GetB(D, x_init, y);
     integer L=root(-D, 4);
 
@@ -44,6 +44,9 @@ form GenerateWesolowski(form &y, form &x_init,
     form x = form::identity(D);
 
     for (int64_t j = l - 1; j >= 0; j--) {
+        if (stopped) {
+            break;
+        }
         x = FastPowFormNucomp(x, D, integer(1 << k), L, reducer);
 
         std::vector<form> ys((1 << k));
@@ -78,7 +81,7 @@ form GenerateWesolowski(form &y, form &x_init,
     return x;
 }
 
-std::vector<uint8_t> ProveSlow(integer& D, form& x, uint64_t num_iterations) {
+std::vector<uint8_t> ProveSlow(integer& D, form& x, uint64_t num_iterations, std::atomic_bool &stopped) {
     integer L = root(-D, 4);
     PulmarkReducer reducer;
     form y = form::from_abd(x.a, x.b, D);
@@ -90,13 +93,16 @@ std::vector<uint8_t> ProveSlow(integer& D, form& x, uint64_t num_iterations) {
     if (k <= 0) k = 1;
     if (l <= 0) l = 1;
     for (int i = 0; i < num_iterations; i++) {
+        if (stopped) {
+            return {};
+        }
         if (i % (k * l) == 0) {
             intermediates.push_back(y);
         }
         nudupl_form(y, y, D, L);
         reducer.reduce(y);
     }
-    form proof = GenerateWesolowski(y, x, D, reducer, intermediates, num_iterations, k, l);
+    form proof = GenerateWesolowski(y, x, D, reducer, intermediates, num_iterations, k, l, stopped);
     std::vector<uint8_t> result = SerializeForm(y, d_bits);
     std::vector<uint8_t> proof_bytes = SerializeForm(proof, d_bits);
     result.insert(result.end(), proof_bytes.begin(), proof_bytes.end());
diff --git a/src/threading.h b/src/threading.h
index 50d4b49..35968b3 100644
--- a/src/threading.h
+++ b/src/threading.h
@@ -7,9 +7,6 @@
 //mp_limb_t is an unsigned integer
 static_assert(sizeof(mp_limb_t)==8, "");
 
-static_assert(sizeof(unsigned long int)==8, "");
-static_assert(sizeof(long int)==8, "");
-
 static uint64 get_time_cycles() {
     // Returns the time in EDX:EAX.
     uint64 high;
diff --git a/src/vdf.h b/src/vdf.h
index dec959d..4c83918 100644
--- a/src/vdf.h
+++ b/src/vdf.h
@@ -50,15 +50,12 @@
 #include "util.h"
 #include "callback.h"
 #include "fast_storage.h"
-#include <boost/asio.hpp>
 
 #include <atomic>
 #include <optional>
 
 bool warn_on_corruption_in_production=false;
 
-using boost::asio::ip::tcp;
-
 struct akashnil_form {
     // y = ax^2 + bxy + y^2
     mpz_t a;
@@ -256,6 +253,10 @@ Proof ProveOneWesolowski(uint64_t iters, integer& D, form f, OneWesolowskiCallba
     OneWesolowskiProver prover(sg, D, weso->forms.get(), stopped);
     prover.start();
     while (!prover.IsFinished()) {
+        if (stopped) {
+            print("stop prover and exit with empty result");
+            return Proof({}, {});
+        }
         this_thread::sleep_for(1s);
     }
     int d_bits = D.num_bits();
